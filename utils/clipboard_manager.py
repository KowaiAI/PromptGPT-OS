"""
Clipboard Manager for PromptGPT OS
Handles copying generated prompts to system clipboard
"""

try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False

from rich.console import Console
import platform

console = Console()

class ClipboardManager:
    """Manages clipboard operations for copying prompts"""
    
    def __init__(self):
        self.available = self._check_clipboard_availability()
    
    def _check_clipboard_availability(self):
        """Check if clipboard functionality is available"""
        if not CLIPBOARD_AVAILABLE:
            return False
        try:
            # Test clipboard access
            pyperclip.copy("test")
            pyperclip.paste()
            return True
        except Exception as e:
            error_msg = str(e)
            if "xclip" in error_msg or "xsel" in error_msg:
                console.print(f"[yellow]Installing clipboard support...[/yellow]")
                # The system dependency should be installed via packager_tool
                try:
                    # Retry after system dependencies are installed
                    pyperclip.copy("test")
                    pyperclip.paste()
                    return True
                except:
                    pass
            console.print(f"[dim yellow]Clipboard unavailable: {error_msg}[/dim yellow]")
            return False
    
    def copy_to_clipboard(self, text):
        """Copy text to system clipboard"""
        if not self.available or not CLIPBOARD_AVAILABLE:
            return False, "Clipboard functionality not available"
        
        try:
            pyperclip.copy(text)
            return True, "Successfully copied to clipboard"
        except Exception as e:
            return False, f"Failed to copy: {str(e)}"
    
    def get_clipboard_content(self):
        """Get current clipboard content"""
        if not self.available or not CLIPBOARD_AVAILABLE:
            return None
        
        try:
            return pyperclip.paste()
        except Exception:
            return None
    
    def show_clipboard_instructions(self):
        """Show platform-specific clipboard instructions"""
        system = platform.system().lower()
        
        if system == "linux":
            return "üìã Linux: Use Ctrl+V to paste from clipboard"
        elif system == "darwin":  # macOS
            return "üìã macOS: Use Cmd+V to paste from clipboard"
        elif system == "windows":
            return "üìã Windows: Use Ctrl+V to paste from clipboard"
        else:
            return "üìã Use your system's paste shortcut to paste from clipboard"
    
    def format_for_clipboard(self, prompt_content, category=None, subcategory=None):
        """Format prompt content optimally for clipboard"""
        formatted = f"{prompt_content}\n\n"
        
        if category and subcategory:
            formatted += f"Generated by PromptGPT OS\n"
            formatted += f"Category: {category.title()} ‚Üí {subcategory.title()}\n"
            formatted += f"Ready to use with AI tools!"
        
        return formatted
    
    def copy_prompt_with_metadata(self, prompt_content, category, subcategory):
        """Copy prompt with optional metadata"""
        # Format the content
        formatted_content = self.format_for_clipboard(prompt_content, category, subcategory)
        
        # Copy to clipboard
        success, message = self.copy_to_clipboard(formatted_content)
        
        if success:
            console.print(f"[bold green]‚úÖ {message}[/bold green]")
            console.print(f"[dim cyan]{self.show_clipboard_instructions()}[/dim cyan]")
        else:
            console.print(f"[bold red]‚ùå {message}[/bold red]")
        
        return success
    
    def copy_prompt_only(self, prompt_content):
        """Copy only the prompt content without metadata"""
        success, message = self.copy_to_clipboard(prompt_content)
        
        if success:
            console.print(f"[bold green]‚úÖ {message}[/bold green]")
            console.print(f"[dim cyan]{self.show_clipboard_instructions()}[/dim cyan]")
        else:
            console.print(f"[bold red]‚ùå {message}[/bold red]")
        
        return success
    
    def get_status(self):
        """Get clipboard manager status"""
        return {
            'available': self.available,
            'platform': platform.system(),
            'instructions': self.show_clipboard_instructions()
        }